{"version":3,"sources":["core/compatibility/default-mode.ts"],"names":[],"mappings":";;;;;;;;;;;;OAAO,EAAC,QAAQ,EAAuB,SAAS,EAAE,WAAW,EAAE,MAAM,EAAC,MAAM,eAAe;AAG3F,OAAO,IAAM,2BAA2B,GAAG,IAAI,WAAW,CAAC,wBAAwB,CAAC,CAAC;AAErF,wFAAwF;AACxF,OAAO,IAAM,qBAAqB,GAAG,8pBAsCpC,CAAC;AAEF,qEAAqE;AAErE;IACE,2BAAiD,mBAA4B;QAC3E,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACzB,MAAM,KAAK,CAAC,4EAA4E,CAAC,CAAC;QAC5F,CAAC;IACH,CAAC;IANH;QAAC,SAAS,CAAC,EAAC,QAAQ,EAAE,qBAAqB,EAAC,CAAC;mBAE9B,MAAM,CAAC,2BAA2B,CAAC;;yBAFL;IAO7C,wBAAC;AAAD,CANA,AAMC,IAAA;AAGD;;;;;;;GAOG;AAQH;IAAA;IAOA,CAAC;IANQ,2CAAO,GAAd;QACE,MAAM,CAAC;YACL,QAAQ,EAAE,mCAAmC;YAC7C,SAAS,EAAE,EAAE;SACd,CAAC;IACJ,CAAC;IAbH;QAAC,QAAQ,CAAC;YACR,YAAY,EAAE,CAAC,iBAAiB,CAAC;YACjC,OAAO,EAAE,CAAC,iBAAiB,CAAC;YAC5B,SAAS,EAAE,CAAC;oBACV,OAAO,EAAE,2BAA2B,EAAE,QAAQ,EAAE,KAAK;iBACtD,CAAC;SACH,CAAC;;2CAAA;IAQF,0CAAC;AAAD,CAPA,AAOC,IAAA","file":"default-mode.js","sourcesContent":["import {NgModule, ModuleWithProviders, Directive, OpaqueToken, Inject} from '@angular/core';\n\n\nexport const MATERIAL_COMPATIBILITY_MODE = new OpaqueToken('md-compatibiility-mode');\n\n/** Selector that matches all elements that may have style collisions with material1. */\nexport const MAT_ELEMENTS_SELECTOR = `\n  mat-autocomplete,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-container,\n  mat-divider,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-hint,\n  mat-icon,\n  mat-ink-bar,\n  mat-input,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-progress-circle,\n  mat-radio-button,\n  mat-radio-group,\n  mat-select,\n  mat-sidenav,\n  mat-slider,\n  mat-spinner,\n  mat-tab,\n  mat-toolbar\n`;\n\n/** Directive that enforces that the `mat-` prefix cannot be used. */\n@Directive({selector: MAT_ELEMENTS_SELECTOR})\nexport class MatPrefixEnforcer {\n  constructor(@Inject(MATERIAL_COMPATIBILITY_MODE) isCompatibilityMode: boolean) {\n    if (!isCompatibilityMode) {\n      throw Error('The \"mat-\" prefix cannot be used out of ng-material v1 compatibility mode.');\n    }\n  }\n}\n\n\n/**\n * Module that enforces the default \"compatibility mode\" settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n *\n * Because the point of this directive is to *not* be used, it will be tree-shaken away by\n * optimizers when not in compatibility mode.\n */\n@NgModule({\n  declarations: [MatPrefixEnforcer],\n  exports: [MatPrefixEnforcer],\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: false,\n  }]\n})\nexport class DefaultStyleCompatibilityModeModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DefaultStyleCompatibilityModeModule,\n      providers: [],\n    };\n  }\n}\n"]}