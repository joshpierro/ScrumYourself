{"version":3,"sources":["progress-spinner/progress-spinner.ts"],"names":[],"mappings":"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","file":"progress-spinner.js","sourcesContent":["import {\n  NgModule,\n  ModuleWithProviders,\n  Component,\n  HostBinding,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  Input,\n  ElementRef,\n  NgZone\n} from '@angular/core';\nimport {DefaultStyleCompatibilityModeModule} from '../core';\n\n\n// TODO(josephperrott): Benchpress tests.\n\n/** A single degree in radians. */\nconst DEGREE_IN_RADIANS = Math.PI / 180;\n/** Duration of the indeterminate animation. */\nconst DURATION_INDETERMINATE = 667;\n/** Duration of the indeterminate animation. */\nconst DURATION_DETERMINATE = 225;\n/** Start animation value of the indeterminate animation */\nconst startIndeterminate = 3;\n/** End animation value of the indeterminate animation */\nconst endIndeterminate = 80;\n/* Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden. */\nconst MAX_ANGLE = 359.99 / 100;\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\ntype EasingFn = (currentTime: number, startValue: number,\n                 changeInValue: number, duration: number) => number\n\n\n/**\n * <md-progress-spinner> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'md-progress-spinner, mat-progress-spinner, md-progress-circle, mat-progress-circle',\n  host: {\n    'role': 'progressbar',\n    '[attr.aria-valuemin]': '_ariaValueMin',\n    '[attr.aria-valuemax]': '_ariaValueMax',\n    '[class.md-primary]': 'color == \"primary\"',\n    '[class.md-accent]': 'color == \"accent\"',\n    '[class.md-warn]': 'color == \"warn\"',\n  },\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MdProgressSpinner implements OnDestroy {\n  /** The id of the last requested animation. */\n  private _lastAnimationId: number = 0;\n\n  /** The id of the indeterminate interval. */\n  private _interdeterminateInterval: number;\n\n  /** The SVG <path> node that is used to draw the circle. */\n  private _path: SVGPathElement;\n\n  /**\n   * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n   * because voiceover does not report the progress indicator as indeterminate if the aria min\n   * and/or max value are number values.\n   */\n  get _ariaValueMin() {\n    return this.mode == 'determinate' ? 0 : null;\n  }\n\n  get _ariaValueMax() {\n    return this.mode == 'determinate' ? 100 : null;\n  }\n\n  /** @docs-private */\n  get interdeterminateInterval() {\n    return this._interdeterminateInterval;\n  }\n  /** @docs-private */\n  set interdeterminateInterval(interval: number) {\n    clearInterval(this._interdeterminateInterval);\n    this._interdeterminateInterval = interval;\n  }\n\n  /**\n   * Clean up any animations that were running.\n   */\n  ngOnDestroy() {\n    this._cleanupIndeterminateAnimation();\n  }\n\n  /** Value of the progress circle. It is bound to the host as the attribute aria-valuenow. */\n  private _value: number;\n  @Input()\n  @HostBinding('attr.aria-valuenow')\n  get value() {\n    if (this.mode == 'determinate') {\n      return this._value;\n    }\n  }\n  set value(v: number) {\n    if (v != null && this.mode == 'determinate') {\n      let newValue = clamp(v);\n      this._animateCircle((this.value || 0), newValue, linearEase, DURATION_DETERMINATE, 0);\n      this._value = newValue;\n    }\n  }\n\n  /**\n   * Mode of the progress circle\n   *\n   * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n   * mode is bound to the host as the attribute host.\n   */\n  @HostBinding('attr.mode')\n  @Input()\n  get mode() {\n    return this._mode;\n  }\n  set mode(m: ProgressSpinnerMode) {\n    if (m == 'indeterminate') {\n      this._startIndeterminateAnimation();\n    } else {\n      this._cleanupIndeterminateAnimation();\n    }\n    this._mode = m;\n  }\n  private _mode: ProgressSpinnerMode = 'determinate';\n\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef\n  ) {}\n\n\n  /**\n   * Animates the circle from one percentage value to another.\n   *\n   * @param animateFrom The percentage of the circle filled starting the animation.\n   * @param animateTo The percentage of the circle filled ending the animation.\n   * @param ease The easing function to manage the pace of change in the animation.\n   * @param duration The length of time to show the animation, in milliseconds.\n   * @param rotation The starting angle of the circle fill, with 0° represented at the top center\n   *    of the circle.\n   */\n  private _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn,\n                        duration: number, rotation: number) {\n\n    let id = ++this._lastAnimationId;\n    let startTime = Date.now();\n    let changeInValue = animateTo - animateFrom;\n\n    // No need to animate it if the values are the same\n    if (animateTo === animateFrom) {\n      this._renderArc(animateTo, rotation);\n    } else {\n      let animation = () => {\n        let elapsedTime = Math.max(0, Math.min(Date.now() - startTime, duration));\n\n        this._renderArc(\n          ease(elapsedTime, animateFrom, changeInValue, duration),\n          rotation\n        );\n\n        // Prevent overlapping animations by checking if a new animation has been called for and\n        // if the animation has lasted longer than the animation duration.\n        if (id === this._lastAnimationId && elapsedTime < duration) {\n          requestAnimationFrame(animation);\n        }\n      };\n\n      // Run the animation outside of Angular's zone, in order to avoid\n      // hitting ZoneJS and change detection on each frame.\n      this._ngZone.runOutsideAngular(animation);\n    }\n  }\n\n\n  /**\n   * Starts the indeterminate animation interval, if it is not already running.\n   */\n  private _startIndeterminateAnimation() {\n    let rotationStartPoint = 0;\n    let start = startIndeterminate;\n    let end = endIndeterminate;\n    let duration = DURATION_INDETERMINATE;\n    let animate = () => {\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n      rotationStartPoint = (rotationStartPoint + end) % 100;\n      let temp = start;\n      start = -end;\n      end = -temp;\n    };\n\n    if (!this.interdeterminateInterval) {\n      this._ngZone.runOutsideAngular(() => {\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\n        animate();\n      });\n    }\n  }\n\n\n  /**\n   * Removes interval, ending the animation.\n   */\n  private _cleanupIndeterminateAnimation() {\n    this.interdeterminateInterval = null;\n  }\n\n  /**\n   * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n   * DOM attribute on the `<path>`.\n   */\n  private _renderArc(currentValue: number, rotation: number) {\n    // Caches the path reference so it doesn't have to be looked up every time.\n    let path = this._path = this._path || this._elementRef.nativeElement.querySelector('path');\n\n    // Ensure that the path was found. This may not be the case if the\n    // animation function fires too early.\n    if (path) {\n      path.setAttribute('d', getSvgArc(currentValue, rotation));\n    }\n  }\n}\n\n\n/**\n * <md-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'md-spinner, mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n  },\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n})\nexport class MdSpinner extends MdProgressSpinner implements OnDestroy {\n  constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef, ngZone: NgZone) {\n    super(changeDetectorRef, ngZone, elementRef);\n    this.mode = 'indeterminate';\n  }\n\n  ngOnDestroy() {\n    // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because\n    // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).\n    super.ngOnDestroy();\n  }\n}\n\n\n/**\n * Module functions.\n */\n\n/** Clamps a value to be between 0 and 100. */\nfunction clamp(v: number) {\n  return Math.max(0, Math.min(100, v));\n}\n\n\n/**\n * Converts Polar coordinates to Cartesian.\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\n  let angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n\n\n/**\n * Easing function for linear animation.\n */\nfunction linearEase(currentTime: number, startValue: number,\n                    changeInValue: number, duration: number) {\n  return changeInValue * currentTime / duration + startValue;\n}\n\n\n/**\n * Easing function to match material design indeterminate animation.\n */\nfunction materialEase(currentTime: number, startValue: number,\n                      changeInValue: number, duration: number) {\n  let time = currentTime / duration;\n  let timeCubed = Math.pow(time, 3);\n  let timeQuad = Math.pow(time, 4);\n  let timeQuint = Math.pow(time, 5);\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n\n\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n *\n * @param currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param rotation The starting point of the circle with 0 being the 0 degree point.\n * @return A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue: number, rotation: number) {\n  let startPoint = rotation || 0;\n  let radius = 50;\n  let pathRadius = 40;\n\n  let startAngle = startPoint * MAX_ANGLE;\n  let endAngle = currentValue * MAX_ANGLE;\n  let start = polarToCartesian(radius, pathRadius, startAngle);\n  let end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n  let arcSweep = endAngle < 0 ? 0 : 1;\n  let largeArcFlag: number;\n\n  if (endAngle < 0) {\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\n  } else {\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\n  }\n\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\n}\n\n\n@NgModule({\n  imports: [DefaultStyleCompatibilityModeModule],\n  exports: [MdProgressSpinner, MdSpinner, DefaultStyleCompatibilityModeModule],\n  declarations: [MdProgressSpinner, MdSpinner],\n})\nexport class MdProgressSpinnerModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdProgressSpinnerModule,\n      providers: []\n    };\n  }\n}\n"]}